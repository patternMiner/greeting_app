{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/test_lib/test_lib.es6","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/26","@traceur/generated/TemplateParser/24","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/test_lib/test_lib.js"],"names":[],"mappings":"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","file":"angular2/src/test_lib/test_lib.js","sourceRoot":"/Users/jbisa/ksi/devel/angular2/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {DOM} from 'angular2/src/dom/dom_adapter';\n\nvar _global = typeof window === 'undefined' ? global : window;\n\nexport {proxy} from 'rtts_assert/rtts_assert';\nexport var describe = _global.describe;\nexport var xdescribe = _global.xdescribe;\nexport var ddescribe = _global.ddescribe;\nexport var it = _global.it;\nexport var xit = _global.xit;\nexport var iit = _global.iit;\nexport var beforeEach = _global.beforeEach;\nexport var afterEach = _global.afterEach;\nexport var expect = _global.expect;\nexport var IS_DARTIUM = false;\nexport var IS_NODEJS = typeof window === 'undefined';\n\n// To make testing consistent between dart and js\n_global.print = function(msg) {\n  if (_global.dump) {\n    _global.dump(msg);\n  } else {\n    _global.console.log(msg);\n  }\n};\n\n// Some Map polyfills don't polyfill Map.toString correctly, which\n// gives us bad error messages in tests.\n// The only way to do this in Jasmine is to monkey patch a method\n// to the object :-(\n_global.Map.prototype.jasmineToString = function() {\n  var m = this;\n  if (!m) {\n    return ''+m;\n  }\n  var res = [];\n  m.forEach( (v,k) => {\n    res.push(`${k}:${v}`);\n  });\n  return `{ ${res.join(',')} }`;\n}\n\n_global.beforeEach(function() {\n  jasmine.addMatchers({\n    // Custom handler for Map as Jasmine does not support it yet\n    toEqual: function(util, customEqualityTesters) {\n      return {\n        compare: function(actual, expected) {\n          return {\n            pass: util.equals(actual, expected, [compareMap])\n          };\n        }\n      };\n\n      function compareMap(actual, expected) {\n        if (actual instanceof Map) {\n          var pass = actual.size === expected.size;\n          if (pass) {\n            actual.forEach( (v,k) => {\n              pass = pass && util.equals(v, expected.get(k));\n            });\n          }\n          return pass;\n        } else {\n          return undefined;\n        }\n      }\n    },\n\n    toBePromise: function() {\n      return {\n        compare: function (actual, expectedClass) {\n          var pass = typeof actual === 'object' && typeof actual.then === 'function';\n          return {\n            pass: pass,\n            get message() {\n              return 'Expected ' + actual + ' to be a promise';\n            }\n          };\n        }\n      };\n    },\n\n    toBeAnInstanceOf: function() {\n      return {\n        compare: function(actual, expectedClass) {\n          var pass = typeof actual === 'object' && actual instanceof expectedClass;\n          return {\n            pass: pass,\n            get message() {\n              return 'Expected ' + actual + ' to be an instance of ' + expectedClass;\n            }\n          };\n        }\n      };\n    },\n\n    toHaveText: function() {\n      return {\n        compare: function(actual, expectedText) {\n          var actualText = elementText(actual);\n          return {\n            pass: actualText == expectedText,\n            get message() {\n              return 'Expected ' + actualText + ' to be equal to ' + expectedText;\n            }\n          };\n        }\n      };\n    },\n\n    toImplement: function() {\n      return {\n        compare: function(actualObject, expectedInterface) {\n          var objProps = Object.keys(actualObject.constructor.prototype);\n          var intProps = Object.keys(expectedInterface.prototype);\n\n          var missedMethods = [];\n          intProps.forEach((k) => {\n            if (!actualObject.constructor.prototype[k]) missedMethods.push(k);\n          });\n\n          return {\n            pass: missedMethods.length == 0,\n            get message() {\n              return 'Expected ' + actualObject + ' to have the following methods: ' + missedMethods.join(\", \");\n            }\n          };\n        }\n      };\n    }\n  });\n});\n\nexport class SpyObject {\n  spy(name){\n    if (! this[name]) {\n      this[name] = this._createGuinnessCompatibleSpy();\n    }\n    return this[name];\n  }\n\n  rttsAssert(value) {\n    return true;\n  }\n\n  _createGuinnessCompatibleSpy(){\n    var newSpy = jasmine.createSpy();\n    newSpy.andCallFake = newSpy.and.callFake;\n    return newSpy;\n  }\n}\n\n\nfunction elementText(n) {\n  if (!IS_NODEJS) {\n    var hasNodes = (n) => {var children = DOM.childNodes(n); return children && children.length > 0;}\n\n    if (n instanceof Comment)         return '';\n\n    if (n instanceof Array)           return n.map((nn) => elementText(nn)).join(\"\");\n    if (n instanceof Element && DOM.tagName(n) == 'CONTENT')\n      return elementText(Array.prototype.slice.apply(n.getDistributedNodes()));\n    if (DOM.hasShadowRoot(n))             return elementText(DOM.childNodesAsList(n.shadowRoot));\n    if (hasNodes(n))                  return elementText(DOM.childNodesAsList(n));\n\n    return n.textContent;\n  } else {\n    if (DOM.hasShadowRoot(n)) {\n      return elementText(DOM.getShadowRoot(n).childNodes);\n    } else if (n instanceof Array) {\n      return n.map((nn) => elementText(nn)).join(\"\");\n    } else if (DOM.tagName(n) == 'content') {\n      //minimal implementation of getDistributedNodes()\n      var host = null;\n      var temp = n;\n      while (temp.parent) {\n        if (DOM.hasShadowRoot(temp)) {\n          host = temp;\n        }\n        temp = temp.parent;\n      }\n      if (host) {\n        var list = [];\n        var select = DOM.getAttribute(n, \"select\");\n        var selectClass = select? select.substring(1): null;\n        DOM.childNodes(host).forEach((child) => {\n          var classList = DOM.classList(child);\n          if (selectClass && classList.indexOf(selectClass) > -1 || selectClass == null && classList.length == 0) {\n            list.push(child);\n          }\n        });\n        return list.length > 0? elementText(list): \"\";\n      }\n      return \"\";\n    } else {\n      return DOM.getText(n);\n    }\n  }\n}\n","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__export($__placeholder__0, $__m.$__placeholder__1);","$__export($__placeholder__0, $__placeholder__1)","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import {DOM} from 'angular2/src/dom/dom_adapter';\nvar _global = typeof window === 'undefined' ? global : window;\nexport {proxy} from 'rtts_assert/rtts_assert';\nexport var describe = _global.describe;\nexport var xdescribe = _global.xdescribe;\nexport var ddescribe = _global.ddescribe;\nexport var it = _global.it;\nexport var xit = _global.xit;\nexport var iit = _global.iit;\nexport var beforeEach = _global.beforeEach;\nexport var afterEach = _global.afterEach;\nexport var expect = _global.expect;\nexport var IS_DARTIUM = false;\nexport var IS_NODEJS = typeof window === 'undefined';\n_global.print = function(msg) {\n  if (_global.dump) {\n    _global.dump(msg);\n  } else {\n    _global.console.log(msg);\n  }\n};\n_global.Map.prototype.jasmineToString = function() {\n  var m = this;\n  if (!m) {\n    return '' + m;\n  }\n  var res = [];\n  m.forEach((v, k) => {\n    res.push(`${k}:${v}`);\n  });\n  return `{ ${res.join(',')} }`;\n};\n_global.beforeEach(function() {\n  jasmine.addMatchers({\n    toEqual: function(util, customEqualityTesters) {\n      return {compare: function(actual, expected) {\n          return {pass: util.equals(actual, expected, [compareMap])};\n        }};\n      function compareMap(actual, expected) {\n        if (actual instanceof Map) {\n          var pass = actual.size === expected.size;\n          if (pass) {\n            actual.forEach((v, k) => {\n              pass = pass && util.equals(v, expected.get(k));\n            });\n          }\n          return pass;\n        } else {\n          return undefined;\n        }\n      }\n    },\n    toBePromise: function() {\n      return {compare: function(actual, expectedClass) {\n          var pass = typeof actual === 'object' && typeof actual.then === 'function';\n          return {\n            pass: pass,\n            get message() {\n              return 'Expected ' + actual + ' to be a promise';\n            }\n          };\n        }};\n    },\n    toBeAnInstanceOf: function() {\n      return {compare: function(actual, expectedClass) {\n          var pass = typeof actual === 'object' && actual instanceof expectedClass;\n          return {\n            pass: pass,\n            get message() {\n              return 'Expected ' + actual + ' to be an instance of ' + expectedClass;\n            }\n          };\n        }};\n    },\n    toHaveText: function() {\n      return {compare: function(actual, expectedText) {\n          var actualText = elementText(actual);\n          return {\n            pass: actualText == expectedText,\n            get message() {\n              return 'Expected ' + actualText + ' to be equal to ' + expectedText;\n            }\n          };\n        }};\n    },\n    toImplement: function() {\n      return {compare: function(actualObject, expectedInterface) {\n          var objProps = Object.keys(actualObject.constructor.prototype);\n          var intProps = Object.keys(expectedInterface.prototype);\n          var missedMethods = [];\n          intProps.forEach((k) => {\n            if (!actualObject.constructor.prototype[k])\n              missedMethods.push(k);\n          });\n          return {\n            pass: missedMethods.length == 0,\n            get message() {\n              return 'Expected ' + actualObject + ' to have the following methods: ' + missedMethods.join(\", \");\n            }\n          };\n        }};\n    }\n  });\n});\nexport class SpyObject {\n  spy(name) {\n    if (!this[name]) {\n      this[name] = this._createGuinnessCompatibleSpy();\n    }\n    return this[name];\n  }\n  rttsAssert(value) {\n    return true;\n  }\n  _createGuinnessCompatibleSpy() {\n    var newSpy = jasmine.createSpy();\n    newSpy.andCallFake = newSpy.and.callFake;\n    return newSpy;\n  }\n}\nfunction elementText(n) {\n  if (!IS_NODEJS) {\n    var hasNodes = (n) => {\n      var children = DOM.childNodes(n);\n      return children && children.length > 0;\n    };\n    if (n instanceof Comment)\n      return '';\n    if (n instanceof Array)\n      return n.map((nn) => elementText(nn)).join(\"\");\n    if (n instanceof Element && DOM.tagName(n) == 'CONTENT')\n      return elementText(Array.prototype.slice.apply(n.getDistributedNodes()));\n    if (DOM.hasShadowRoot(n))\n      return elementText(DOM.childNodesAsList(n.shadowRoot));\n    if (hasNodes(n))\n      return elementText(DOM.childNodesAsList(n));\n    return n.textContent;\n  } else {\n    if (DOM.hasShadowRoot(n)) {\n      return elementText(DOM.getShadowRoot(n).childNodes);\n    } else if (n instanceof Array) {\n      return n.map((nn) => elementText(nn)).join(\"\");\n    } else if (DOM.tagName(n) == 'content') {\n      var host = null;\n      var temp = n;\n      while (temp.parent) {\n        if (DOM.hasShadowRoot(temp)) {\n          host = temp;\n        }\n        temp = temp.parent;\n      }\n      if (host) {\n        var list = [];\n        var select = DOM.getAttribute(n, \"select\");\n        var selectClass = select ? select.substring(1) : null;\n        DOM.childNodes(host).forEach((child) => {\n          var classList = DOM.classList(child);\n          if (selectClass && classList.indexOf(selectClass) > -1 || selectClass == null && classList.length == 0) {\n            list.push(child);\n          }\n        });\n        return list.length > 0 ? elementText(list) : \"\";\n      }\n      return \"\";\n    } else {\n      return DOM.getText(n);\n    }\n  }\n}\n\n//# sourceMappingURL=/Users/jbisa/ksi/devel/angular2/modules/angular2/src/test_lib/test_lib.map\n\n//# sourceMappingURL=./test_lib.map"]}